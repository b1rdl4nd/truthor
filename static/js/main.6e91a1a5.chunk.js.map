{"version":3,"sources":["cheers.mp4","store.js","SettingsButton.js","AnimatedCard.js","SettingsCard.js","GameCard.js","Game.js","decks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","actionTypes","initialState","isShowingIntroduction","createStore","combineReducers","game","state","action","type","settingsButtonStyle","makeStyles","icon","color","props","isViewingSettings","SettingsButton","toggleSettings","styles","IconButton","className","onClick","AnimatedCard","animated","Card","settingsCardStyle","introHeader","cardMobile","textAlign","isViewingIntroduction","background","position","height","width","willChange","cardDesktop","top","left","right","bottom","margin","overflow","minHeight","maxHeight","topSpacing","marginTop","formControl","minWidth","marginBottom","beginButton","display","marginLeft","marginRight","SettingsBody","isEricAndreModeActivated","setIsEricAndreModeActivated","currentDeck","changeDeck","options","truthCount","orCount","CardHeader","title","style","CardContent","FormControl","FormLabel","component","Select","native","value","onChange","e","target","Switch","checked","name","inputProps","Typography","Link","href","IntroBody","setIsViewingIntroduction","Button","variant","connect","z","isisShowingIntroduction","deckNames","decks","transform","opacity","map","index","key","settingsDisplay","body","cardStyle","window","innerWidth","raised","interpolate","o","cardStyles","firstColor","secondColor","cardContent","overflowY","overflowX","truthButton","orButton","cardActions","EricAndre","advance","isMobile","onError","onAbort","autoPlay","onLoadedData","timeout","setTimeout","playsInline","src","CHEERS","GameCard","deckName","colorPair","question","onTruth","onOr","useState","shouldShowVideo","setShouldShowVideo","gameDisplay","t","CardActions","Silly","Storytelling","shuffle","array","sort","Math","random","shuffledColors","Game","colorIndex","setColorIndex","colorLength","length","setIsViewingSettings","setTruthCount","setOrCount","setDeckName","nextQuestion","useSpring","config","mass","tension","friction","setIndex","deck","setDeck","lastIndex","nextColor","gameCard","settingsCard","Grid","container","spacing","align","justify","direction","item","appTheme","createMuiTheme","typography","fontFamily","App","store","ThemeProvider","theme","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e91a1a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cheers.f29e7cef.mp4\";","import { createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\n\nconst actionTypes = {\n  HIDE_INTRODUCTION: \"HIDE_INTRODUCTION\",\n};\n\nexport const hideIntroduction = () => ({\n  type: actionTypes.HIDE_INTRODUCTION,\n  payload: {},\n});\n\nconst initialState = {\n  isShowingIntroduction: true,\n};\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.HIDE_INTRODUCTION:\n      return {\n        ...state,\n        isShowingIntroduction: false,\n      };\n    default:\n      return state;\n  }\n};\nexport default createStore(combineReducers({ game: gameReducer }));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\nconst settingsButtonStyle = makeStyles({\n  icon: {\n    color: (props) => (props.isViewingSettings ? \"black\" : \"white\"),\n  },\n});\n\nconst SettingsButton = ({ isViewingSettings, toggleSettings }) => {\n  const styles = settingsButtonStyle({ isViewingSettings });\n  return (\n    <IconButton className={styles.icon} onClick={toggleSettings}>\n      {!isViewingSettings ? <SettingsIcon /> : <KeyboardBackspaceIcon />}\n    </IconButton>\n  );\n};\n\nexport default SettingsButton;\n","import Card from \"@material-ui/core/Card\";\nimport { animated } from \"react-spring\";\n\nconst AnimatedCard = animated(Card);\n\nexport default AnimatedCard;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Link from \"@material-ui/core/Link\";\nimport { connect } from \"react-redux\";\nimport Switch from \"@material-ui/core/Switch\";\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nconst settingsCardStyle = makeStyles({\n  introHeader: {},\n  cardMobile: {\n    textAlign: \"left\",\n    color: (props) => (props.isViewingIntroduction ? \"white\" : \"black\"),\n    background: (props) =>\n      props.isViewingIntroduction\n        ? \"linear-gradient(135deg, #CCABD8 0%, #E5C1CD 100%)\"\n        : \"white\",\n    position: \"absolute\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\",\n  },\n  cardDesktop: {\n    textAlign: \"left\",\n    color: (props) => (props.isViewingIntroduction ? \"white\" : \"black\"),\n    background: (props) =>\n      props.isViewingIntroduction\n        ? \"linear-gradient(135deg, #CCABD8 0%, #E5C1CD 100%)\"\n        : \"white\",\n    position: \"absolute\",\n    willChange: \" transform, opacity\",\n    height: \"50%\",\n    width: \"60%\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"auto\",\n    overflow: \"auto\",\n    minHeight: \"310px\",\n    maxHeight: \"400px\",\n  },\n  topSpacing: {\n    marginTop: \"32px !important\",\n  },\n  formControl: {\n    minWidth: \"120px\",\n    marginBottom: \"16px\",\n  },\n  beginButton: {\n    background: \"linear-gradient(135deg, #FE676E 0%, #FD8F52 100%)\",\n    color: \"white\",\n    display: \"flex\",\n    marginTop: \"18px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n});\n\nconst SettingsBody = ({\n  isEricAndreModeActivated,\n  setIsEricAndreModeActivated,\n  currentDeck,\n  changeDeck,\n  styles,\n  options,\n  truthCount,\n  orCount,\n  toggleSettings,\n}) => {\n  return (\n    <>\n      <CardHeader\n        title={\n          <span style={{ position: \"absolute\", top: \"18px\", left: \"16px\" }}>\n            Settings\n          </span>\n        }\n        action={\n          <SettingsButton\n            isViewingSettings={true}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent>\n        <div>\n          <FormControl className={styles.formControl}>\n            <FormLabel component=\"legend\">Question Deck</FormLabel>\n            <Select\n              native\n              value={currentDeck}\n              onChange={(e) => changeDeck(e.target.value)}\n            >\n              {options}\n            </Select>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <FormLabel component=\"legend\">\n              Eric Andre Mode (\n              {isEricAndreModeActivated ? \"Activated\" : \"Deactivated\"})\n            </FormLabel>\n            <Switch\n              checked={isEricAndreModeActivated}\n              onChange={(e) => {\n                setIsEricAndreModeActivated(!isEricAndreModeActivated);\n              }}\n              name=\"checkedA\"\n              inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n            />\n          </FormControl>\n        </div>\n        <Typography className={styles.topSpacing}>\n          Y'all've selected Truth {truthCount} time{truthCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography>\n          Y'all've selected Or {orCount} time{orCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography className={styles.topSpacing}>\n          Suggest a question:{\" \"}\n          <Link href=\"mailto:truthorgame@gmail.com?subject=Question Suggestion&body=Hello -%0D%0A%0D%0AHere is my question suggestion: \">\n            {\" \"}\n            Email\n          </Link>\n        </Typography>\n      </CardContent>\n    </>\n  );\n};\n\nconst IntroBody = ({ styles, setIsViewingIntroduction, toggleSettings }) => {\n  return (\n    <>\n      <CardHeader className={styles.introHeader} title=\"Truthor v0.3.4\"></CardHeader>\n      <CardContent>\n        <Typography>\n          1. Each round, you'll be presented with a question.\n        </Typography>\n        <Typography>\n          2. As a group, decide on an action to perform to \"pass\" on answering\n          the question.\n        </Typography>\n        <Typography>\n          3. For each question, either answer it or perform the agreed upon\n          \"pass\" action - then press the corresponding button.{\" \"}\n        </Typography>\n        <Typography>\n          4. To change the deck of cards, view your game's selection stats, and\n          more - click the <SettingsIcon /> icon.\n        </Typography>\n        <Typography>5. Have fun!</Typography>\n        <Button\n          onClick={() => {\n            setIsViewingIntroduction(false);\n            toggleSettings(false);\n          }}\n          className={styles.beginButton}\n          variant=\"contained\"\n        >\n          Shuffle & Begin\n        </Button>\n      </CardContent>\n    </>\n  );\n};\n\nconst SettingsCard = ({\n  isEricAndreModeActivated,\n  setIsEricAndreModeActivated,\n  changeDeck,\n  isViewingIntroduction,\n  setIsViewingIntroduction,\n  currentDeck,\n  decks,\n  deckNames,\n  orCount,\n  truthCount,\n  isViewingSettings,\n  toggleSettings,\n  transform,\n  opacity,\n  z,\n}) => {\n  const options = deckNames.map((name, index) => {\n    return (\n      <option key={index} value={name}>\n        {name}\n      </option>\n    );\n  });\n  const styles = settingsCardStyle({ isViewingIntroduction });\n  const settingsDisplay = !isViewingSettings ? \"block\" : \"none\";\n\n  const body = isViewingIntroduction ? (\n    <IntroBody\n      styles={styles}\n      isViewingIntroduction={isViewingIntroduction}\n      setIsViewingIntroduction={setIsViewingIntroduction}\n      toggleSettings={toggleSettings}\n    />\n  ) : (\n    <SettingsBody\n      isEricAndreModeActivated={isEricAndreModeActivated}\n      setIsEricAndreModeActivated={setIsEricAndreModeActivated}\n      currentDeck={currentDeck}\n      changeDeck={changeDeck}\n      styles={styles}\n      options={options}\n      truthCount={truthCount}\n      orCount={orCount}\n      toggleSettings={toggleSettings}\n    />\n  );\n  const cardStyle =\n    window.innerWidth < 400 ? styles.cardMobile : styles.cardDesktop;\n  return (\n    <AnimatedCard\n      raised={true}\n      height=\"100%\"\n      className={cardStyle}\n      style={{\n        display: settingsDisplay,\n        opacity: opacity.interpolate((o) => 1 - o),\n        transform,\n      }}\n    >\n      {body}\n    </AnimatedCard>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  z: state.isisShowingIntroduction,\n});\n\nexport default connect(mapStateToProps, null)(SettingsCard);\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\nimport CHEERS from \"./cheers.mp4\";\n\nconst cardStyles = makeStyles({\n  cardMobile: {\n    position: \"absolute\",\n    background: (props) =>\n      `linear-gradient(135deg, ${props.firstColor} 0%, ${props.secondColor} 100%)`,\n    color: \"white\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\",\n  },\n  cardDesktop: {\n    position: \"absolute\",\n    color: \"white\",\n    background: (props) =>\n      `linear-gradient(135deg, ${props.firstColor} 0%, ${props.secondColor} 100%)`,\n    willChange: \" transform, opacity\",\n    height: \"50%\",\n    width: \"60%\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"auto\",\n    overflow: \"auto\",\n    minHeight: \"310px\",\n    maxHeight: \"400px\",\n  },\n  cardContent: {\n    height: \"60%\",\n    overflowY: \"visible\",\n    overflowX: \"hidden\",\n  },\n  truthButton: {\n    background: \"linear-gradient(135deg, #f093fb 0%, #f5576c 100%)\",\n    color: \"white\",\n    position: \"absolute\",\n    left: \"16px\",\n  },\n  orButton: {\n    background: \"linear-gradient(135deg, #5ee7df 0%, #b490ca 100%)\",\n    marginLeft: \"auto !important\",\n    color: \"white\",\n    position: \"absolute\",\n    right: \"16px\",\n  },\n  cardActions: {\n    width: \"100%\",\n    position: \"absolute\",\n    bottom: \"36px\",\n  },\n});\n\nconst EricAndre = ({ advance }) => {\n  const isMobile = window.innerWidth < 400;\n  const desktopStyle = { height: \"250px\" };\n  const mobileStyle = { width: \"100%\" };\n  return (\n    <video\n      onError={advance}\n      onAbort={advance}\n      style={isMobile ? mobileStyle : desktopStyle}\n      autoPlay\n      onLoadedData={() => {\n        const timeout = window.innerWidth < 400 ? 5000 : 1500\n        setTimeout(() => {\n          advance()\n        }, timeout)\n      }}\n      playsInline\n    >\n      <source src={CHEERS} type=\"video/mp4\" />\n    </video>\n  );\n};\n\nconst GameCard = ({\n  deckName,\n  isEricAndreModeActivated,\n  colorPair,\n  isViewingSettings,\n  question,\n  onTruth,\n  onOr,\n  toggleSettings,\n  transform,\n  opacity,\n}) => {\n  const [shouldShowVideo, setShouldShowVideo] = useState(false);\n  const styles = cardStyles({\n    firstColor: colorPair[0],\n    secondColor: colorPair[1],\n  });\n\n  const gameDisplay = !isViewingSettings ? \"none\" : \"block\";\n  const cardStyle =\n    window.innerWidth < 400 ? styles.cardMobile : styles.cardDesktop;\n  const orClick = () => {\n    if (!isEricAndreModeActivated) {\n      onOr();\n    } else {\n      setShouldShowVideo(true);\n      setTimeout(() => {\n        setShouldShowVideo(false);\n        onOr();\n      }, 1500);\n    }\n  };\n\n  const nowAdvanceQuestion = () => {\n    setTimeout(() => {\n      setShouldShowVideo(false);\n      onOr();\n    }, 3000)\n  };\n  const title = window.innerWidth < 400 ? deckName : `Truthor (${deckName})`\n  return (\n    <AnimatedCard\n      raised={true}\n      className={cardStyle}\n      style={{\n        display: gameDisplay,\n        opacity,\n        transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\n      }}\n    >\n      <CardHeader\n        title={\n          <span style={{ position: \"absolute\", top: \"18px\", left: \"16px\" }}>\n            {title}\n          </span>\n        }\n        action={\n          <SettingsButton\n            isViewingSettings={false}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent className={styles.cardContent}>\n        {shouldShowVideo ? (\n          <EricAndre advance={nowAdvanceQuestion} />\n        ) : (\n          <Typography variant=\"h4\">{question}</Typography>\n        )}\n      </CardContent>\n      <CardActions className={styles.cardActions}>\n        <Button\n          className={styles.truthButton}\n          onClick={onTruth}\n          variant=\"contained\"\n        >\n          <Typography variant=\"h6\">Truth</Typography>\n        </Button>\n        <Button\n          className={styles.orButton}\n          onClick={orClick}\n          variant=\"contained\"\n        >\n          <Typography variant=\"h6\">Or</Typography>\n        </Button>\n      </CardActions>\n    </AnimatedCard>\n  );\n};\n\nexport default GameCard;\n","import React, { useState } from \"react\";\nimport { useSpring } from \"react-spring\";\nimport { iceBreaker, emotions, silly, bigPicture, storyTelling } from \"./decks\";\nimport \"./App.css\";\n\nimport SettingsCard from \"./SettingsCard\";\nimport GameCard from \"./GameCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst decks = {\n  \"Ice Breakers\": iceBreaker,\n  \"Reflection\": emotions,\n  Silly: silly,\n  Storytelling: storyTelling,\n  \"Big Picture\": bigPicture,\n};\n\nconst deckNames = [\n  \"Reflection\",\n  \"Ice Breakers\",\n  \"Big Picture\",\n  \"Silly\",\n  \"Storytelling\",\n];\n\nconst colorPairs = [\n  [\"#8360c3\", \"#2ebf91\"],\n  [\"#ffd452\", \"#544a7d\"],\n  [\"#403A3E\", \"#BE5869\"],\n  [\"#c2e59c\", \"#64b3f4\"],\n  [\"#fc00ff\", \"#00dbde\"],\n  [\"#304352\", \"#d7d2cc\"],\n  [\"#BA8B02\", \"#181818\"],\n  [\"#525252\", \"#3d72b4\"],\n  [\"#F1F2B5\", \"#135058\"],\n  [\"#7b4397\", \"#dc2430\"],\n  [\"#FEAC5E\", \"#C779D0\"],\n  [\"#360033\", \"#0b8793\"],\n];\nfunction shuffle(array) {\n  return array.sort(function () {\n    return 0.5 - Math.random();\n  });\n}\n\nconst shuffledColors = shuffle(colorPairs);\n\nconst Game = () => {\n  const [isEricAndreModeActivated, setIsEricAndreModeActivated] = useState(\n    false\n  );\n  const [colorIndex, setColorIndex] = useState(0);\n  const colorLength = shuffledColors.length;\n  const [isViewingSettings, setIsViewingSettings] = useState(false);\n  const [isViewingIntroduction, setIsViewingIntroduction] = useState(true);\n  const [truthCount, setTruthCount] = useState(0);\n  const [orCount, setOrCount] = useState(0);\n  const [deckName, setDeckName] = useState(deckNames[0]);\n  const toggleSettings = () => {\n    nextQuestion();\n    setIsViewingSettings(!isViewingSettings);\n  };\n  const { transform, opacity } = useSpring({\n    opacity: isViewingSettings ? 1 : 0,\n    transform: `perspective(600px) rotateX(${isViewingSettings ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 },\n  });\n\n  const [index, setIndex] = useState(0);\n  const [deck, setDeck] = useState(decks[deckName]);\n  const nextQuestion = () => {\n    const lastIndex = deck.length;\n    index >= lastIndex - 1 ? setIndex(0) : setIndex(index + 1);\n  };\n\n  const nextColor = () => {\n    colorIndex === colorLength - 1\n      ? setColorIndex(0)\n      : setColorIndex(colorIndex + 1);\n  };\n\n  const onTruth = () => {\n    setTruthCount(truthCount + 1);\n    nextQuestion();\n    nextColor();\n  };\n\n  const onOr = () => {\n    setOrCount(orCount + 1);\n    nextQuestion();\n    nextColor();\n  };\n\n  const changeDeck = (deckName) => {\n    setDeckName(deckName);\n    setDeck(shuffle(decks[deckName]));\n  };\n\n  const colorPair = shuffledColors[colorIndex];\n  const background = `linear-gradient(135deg, ${colorPair[1]} 0%, ${colorPair[0]} 100%)`;\n  const style =\n    window.innerWidth < 400\n      ? {}\n      : { background, height: \"100%\", width: \"100%\" };\n  const gameCard = (\n    <GameCard\n      deckName={deckName}\n      isEricAndreModeActivated={isEricAndreModeActivated}\n      colorPair={shuffledColors[colorIndex]}\n      isViewingSettings={isViewingSettings}\n      toggleSettings={toggleSettings}\n      question={deck[index]}\n      onTruth={onTruth}\n      onOr={onOr}\n      transform={transform}\n      opacity={opacity}\n    />\n  );\n  const settingsCard = (\n    <SettingsCard\n      isEricAndreModeActivated={isEricAndreModeActivated}\n      setIsEricAndreModeActivated={setIsEricAndreModeActivated}\n      isViewingIntroduction={isViewingIntroduction}\n      setIsViewingIntroduction={setIsViewingIntroduction}\n      changeDeck={changeDeck}\n      currentDeck={deckName}\n      deckNames={deckNames}\n      orCount={orCount}\n      truthCount={truthCount}\n      isViewingSettings={isViewingSettings}\n      toggleSettings={toggleSettings}\n      transform={transform}\n      opacity={opacity}\n    />\n  );\n  return window.innerWidth > 400 ? (\n    <Grid\n      style={style}\n      container\n      spacing={0}\n      align=\"center\"\n      justify=\"center\"\n      direction=\"column\"\n    >\n      <Grid item>{gameCard}</Grid>\n      <Grid item>{settingsCard}</Grid>\n    </Grid>\n  ) : (\n    <>\n      {gameCard}\n      {settingsCard}\n    </>\n  );\n};\nexport default Game;\n","export const storyTelling = [\n  \"While out for a walk, you meet an alien. What next?\",\n  \"What could life look like in a 100 years?\",\n  \"A person from 1850 blinks and now is in the present day - what do they experience?\",\n  \"You are teleported 300 years into the future - what's it like?\",\n];\n\nexport const bigPicture = [\n  \"Can we know the future?\",\n  \"Is this the only reality?\",\n  \"Will we be able to understand consciousness?\",\n  \"Is there an afterlife?\",\n  \"Can we trust artificial intelligence?\",\n  \"What do you think of Universal Basic Income?\",\n  \"Will automation replace all jobs? If not, what ones would be excluded?\",\n  \"Is space travel viable in our lifetime?\",\n  \"What are the roots of inequality?\",\n  \"What should the purpose of the media be? What is it's actual function?\",\n];\n\nexport const silly = [\n  \"Who is more likely to join a cult?\",\n];\n\nexport const emotions = [\n  'Even on a \"bad\" day, what gives you hope?',\n  \"How would you rate your self confidence?\",\n  \"Do you say no too often?\",\n  \"When was the last time you had a deeply held belief changed?\",\n  \"What types of situations do you respond differently than what you would like?\",\n  \"Are you more proactive or reactive?\",\n  \"Do you tend to focus on positive or negative traits? Is the focus different when viewing yourself or others?\",\n  \"What's your emotional communication style?\",\n  \"What failures can you admit?\",\n  \"What successes are you proud of?\",\n  \"What kind of person do you want to be?\",\n  \"What kind of person do you not want to be?\",\n];\n\nexport const iceBreaker = [\n  \"What would you do if you won the lottery?\",\n  \"What's an influential song or album to you?\",\n  \"Favourite live event memory?\",\n  \"What halloween costume have you done that has been your favourite?\",\n  'Do you have \"that\" relative?',\n  \"What TV gameshow could you win?\",\n  \"Have you ever used a fake name?\",\n  \"What are your guilty pleasures?\",\n  \"If you could live anywhere, where would that be?\",\n  \"What are your hobbies?\",\n  \"What's your morning routine?\",\n];\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./App.css\";\n\nimport Game from \"./Game\";\n\nconst appTheme = createMuiTheme({\n  typography: {\n    fontFamily: \"DMMONOREG\",\n  },\n});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={appTheme}>\n        <CssBaseline />\n        <Game />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}