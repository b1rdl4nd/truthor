{"version":3,"sources":["cheers.mp4","store.js","SettingsButton.js","AnimatedCard.js","SettingsCard.js","GameCard.js","Game.js","decks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","actionTypes","initialState","isShowingIntroduction","createStore","combineReducers","game","state","action","type","settingsButtonStyle","makeStyles","icon","color","props","isViewingSettings","SettingsButton","toggleSettings","styles","IconButton","className","onClick","AnimatedCard","animated","Card","settingsCardStyle","introHeader","cardMobile","textAlign","isViewingIntroduction","background","position","height","width","willChange","cardDesktop","top","left","right","bottom","margin","overflow","minHeight","maxHeight","topSpacing","marginTop","formControl","minWidth","marginBottom","beginButton","display","marginLeft","marginRight","SettingsBody","isEricAndreModeActivated","setIsEricAndreModeActivated","currentDeck","changeDeck","options","truthCount","orCount","CardHeader","title","style","CardContent","FormControl","FormLabel","component","Select","native","value","onChange","e","target","Switch","checked","name","inputProps","Typography","Link","href","IntroBody","setIsViewingIntroduction","Button","variant","connect","z","isisShowingIntroduction","deckNames","decks","transform","opacity","map","index","key","settingsDisplay","body","cardStyle","window","innerWidth","raised","interpolate","o","cardStyles","firstColor","secondColor","cardContent","overflowY","overflowX","truthButton","orButton","cardActions","EricAndre","isMobile","autoPlay","src","CHEERS","GameCard","colorPair","question","onTruth","onOr","useState","shouldShowVideo","setShouldShowVideo","gameDisplay","t","CardActions","setTimeout","shuffle","array","sort","Math","random","shuffledColors","Game","colorIndex","setColorIndex","colorLength","length","setIsViewingSettings","setTruthCount","setOrCount","deckName","setDeckName","nextQuestion","useSpring","config","mass","tension","friction","setIndex","deck","setDeck","lastIndex","nextColor","Grid","container","spacing","align","justify","direction","item","appTheme","createMuiTheme","typography","fontFamily","App","store","ThemeProvider","theme","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c05a313.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cheers.f29e7cef.mp4\";","import { createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\n\nconst actionTypes = {\n    HIDE_INTRODUCTION: \"HIDE_INTRODUCTION\"\n}\n\nexport const hideIntroduction = () => ({\n    type: actionTypes.HIDE_INTRODUCTION,\n    payload: {}\n})\n\nconst initialState = {\n    isShowingIntroduction: true,\n}\nconst gameReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.HIDE_INTRODUCTION:\n            return {\n                ...state,\n                isShowingIntroduction: false\n            }\n        default:\n            return state\n    }\n}\nexport default createStore(combineReducers({game: gameReducer}))","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\nconst settingsButtonStyle = makeStyles({\n  icon: {\n    color: props => (props.isViewingSettings ? \"black\" : \"white\")\n  }\n});\n\nconst SettingsButton = ({ isViewingSettings, toggleSettings }) => {\n  const styles = settingsButtonStyle({ isViewingSettings });\n  return (\n    <IconButton className={styles.icon} onClick={toggleSettings}>\n      {!isViewingSettings ? <SettingsIcon /> : <KeyboardBackspaceIcon />}\n    </IconButton>\n  );\n};\n\nexport default SettingsButton;\n","import Card from \"@material-ui/core/Card\";\nimport { animated } from \"react-spring\";\n\nconst AnimatedCard = animated(Card);\n\nexport default AnimatedCard;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Link from \"@material-ui/core/Link\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { connect } from \"react-redux\";\nimport Switch from '@material-ui/core/Switch';\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst settingsCardStyle = makeStyles({\n  introHeader: {\n  },\n  cardMobile: {\n    textAlign: 'left',\n    color: props => (props.isViewingIntroduction ? \"white\" : \"black\"),\n    background: props =>\n      props.isViewingIntroduction\n        ? \"linear-gradient(135deg, #CCABD8 0%, #E5C1CD 100%)\"\n        : \"white\",\n    position: \"absolute\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\"\n  },\n  cardDesktop: {\n    textAlign: 'left',\n    color: props => (props.isViewingIntroduction ? \"white\" : \"black\"),\n    background: props =>\n      props.isViewingIntroduction\n        ? \"linear-gradient(135deg, #CCABD8 0%, #E5C1CD 100%)\"\n        : \"white\",\n    position: \"absolute\",\n    willChange: \" transform, opacity\",\n    height: '50%',\n    width: '60%',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: 'auto',\n    overflow: 'auto',\n    minHeight: '310px',\n    maxHeight: '400px'\n  },\n  topSpacing: {\n    marginTop: \"32px !important\"\n  },\n  formControl: {\n    minWidth: \"120px\",\n    marginBottom: '16px'\n  },\n  beginButton: {\n    background: \"linear-gradient(135deg, #FE676E 0%, #FD8F52 100%)\",\n    color: \"white\",\n    display: \"flex\",\n    marginTop: \"18px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  }\n});\n\nconst SettingsBody = ({\n  isEricAndreModeActivated,\n  setIsEricAndreModeActivated,\n  currentDeck,\n  changeDeck,\n  styles,\n  options,\n  truthCount,\n  orCount,\n  toggleSettings\n}) => {\n  return (\n    <>\n      <CardHeader\n        title={<span style={{position: 'absolute', top: '18px', left: '16px'}}>Settings</span>}\n        action={\n          <SettingsButton\n            isViewingSettings={true}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent>\n        <div>\n        <FormControl className={styles.formControl}>\n          <FormLabel component=\"legend\">Question Deck</FormLabel>\n          <Select native value={currentDeck} onChange={e => changeDeck(e.target.value)}>\n            {options}\n          </Select>\n        </FormControl>\n        </div>\n        <div>\n        <FormControl>\n          <FormLabel component=\"legend\">Eric Andre Mode ({isEricAndreModeActivated ? 'Activated' : 'Deactivated'})</FormLabel>\n          <Switch\n            checked={isEricAndreModeActivated}\n            onChange={e => {setIsEricAndreModeActivated(!isEricAndreModeActivated)}}\n            name=\"checkedA\"\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\n          />\n        </FormControl>\n        </div>\n        <Typography className={styles.topSpacing}>\n          Y'all've selected Truth {truthCount} time{truthCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography>\n          Y'all've selected Or {orCount} time{orCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography className={styles.topSpacing}>\n          Suggest a question:{\" \"}\n          <Link href=\"mailto:truthorgame@gmail.com?subject=Question Suggestion&body=Hello -%0D%0A%0D%0AHere is my question suggestion: \">\n            {\" \"}\n            Email\n          </Link>\n        </Typography>\n      </CardContent>\n    </>\n  );\n};\n\nconst IntroBody = ({ styles, setIsViewingIntroduction, toggleSettings }) => {\n  return (\n    <>\n      <CardHeader className={styles.introHeader} title=\"Truthor\"></CardHeader>\n      <CardContent>\n        <Typography>\n          1. Each round, you'll be presented with a question.\n        </Typography>\n        <Typography>\n          2. As a group, decide on an action to perform to \"pass\" on answering\n          the question.\n        </Typography>\n        <Typography>\n          3. For each question, either answer it or perform the agreed upon\n          \"pass\" action - then press the corresponding button.{\" \"}\n        </Typography>\n        <Typography>\n          4. To view your game's selection stats, change the deck of cards, and\n          more - click the <SettingsIcon /> icon.\n        </Typography>\n        <Typography>5. Have fun!</Typography>\n        <Button\n          onClick={() => {\n            setIsViewingIntroduction(false);\n            toggleSettings(false);\n          }}\n          className={styles.beginButton}\n          variant=\"contained\"\n        >\n          Shuffle & Begin\n        </Button>\n      </CardContent>\n    </>\n  );\n};\n\nconst SettingsCard = ({\n  isEricAndreModeActivated,\n  setIsEricAndreModeActivated,\n  changeDeck,\n  isViewingIntroduction,\n  setIsViewingIntroduction,\n  currentDeck,\n  decks,\n  deckNames,\n  orCount,\n  truthCount,\n  isViewingSettings,\n  toggleSettings,\n  transform,\n  opacity,\n  z\n}) => {\n  const options = deckNames.map((name, index) => {return (<option key={index} value={name}>{name}</option>)})\n  const styles = settingsCardStyle({ isViewingIntroduction });\n  const settingsDisplay = !isViewingSettings ? \"block\" : \"none\";\n\n  const body = isViewingIntroduction ? (\n    <IntroBody\n      styles={styles}\n      isViewingIntroduction={isViewingIntroduction}\n      setIsViewingIntroduction={setIsViewingIntroduction}\n      toggleSettings={toggleSettings}\n    />\n  ) : (\n    <SettingsBody\n      isEricAndreModeActivated={isEricAndreModeActivated}\n      setIsEricAndreModeActivated={setIsEricAndreModeActivated}\n      currentDeck={currentDeck}\n      changeDeck={changeDeck}\n      styles={styles}\n      options={options}\n      truthCount={truthCount}\n      orCount={orCount}\n      toggleSettings={toggleSettings}\n    />\n  );\n  const cardStyle = window.innerWidth < 400 ? styles.cardMobile : styles.cardDesktop\n  return (\n    <AnimatedCard\n      raised={true}\n      height=\"100%\"\n      className={cardStyle}\n      style={{\n        display: settingsDisplay,\n        opacity: opacity.interpolate(o => 1 - o),\n        transform\n      }}\n    >\n      {body}\n    </AnimatedCard>\n  );\n};\n\nconst mapStateToProps = state => ({\n  z: state.isisShowingIntroduction\n})\n\nexport default connect(mapStateToProps, null)(SettingsCard);\n","import React, {useState, useEffect} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\nimport CHEERS from './cheers.mp4'\nconst cardStyles = makeStyles({\n  cardMobile: {\n    position: \"absolute\",\n    background: props => `linear-gradient(135deg, ${props.firstColor} 0%, ${props.secondColor} 100%)`,\n    color: \"white\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\",\n  },\n  cardDesktop: {\n    position: \"absolute\",\n    color: 'white',\n    background: props => `linear-gradient(135deg, ${props.firstColor} 0%, ${props.secondColor} 100%)`,\n    willChange: \" transform, opacity\",\n    height: '50%',\n    width: '60%',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: 'auto',\n    overflow: 'auto',\n    minHeight: '310px',\n    maxHeight: '400px'\n  },\n  cardContent: {\n    height: \"60%\",\n    overflowY: \"visible\",\n    overflowX: \"hidden\"\n  },\n  truthButton: {\n    background: \"linear-gradient(135deg, #f093fb 0%, #f5576c 100%)\",\n    color: \"white\",\n    position: 'absolute',\n    left: '16px'\n  },\n  orButton: {\n    background: \"linear-gradient(135deg, #5ee7df 0%, #b490ca 100%)\",\n    marginLeft: \"auto !important\",\n    color: \"white\",\n    position: 'absolute',\n    right: '16px'\n  },\n  cardActions: {\n    width: '100%',\n    position: 'absolute',\n    bottom: '36px'\n  }\n});\n\nconst EricAndre = () => {\n  const isMobile = window.innerWidth < 400\n  const desktopStyle = {height: '250px'}\n  const mobileStyle = {width: '100%'}\n  return (\n    <video style={isMobile ? mobileStyle : desktopStyle} autoPlay>\n        <source src={CHEERS} type='video/mp4' />\n    </video>\n  )\n\n}\n\n\nconst GameCard = ({\n  isEricAndreModeActivated,\n  colorPair,\n  isViewingSettings,\n  question,\n  onTruth,\n  onOr,\n  toggleSettings,\n  transform,\n  opacity\n}) => {\n  const [shouldShowVideo, setShouldShowVideo ] = useState(false)\n  const styles = cardStyles({firstColor: colorPair[0], secondColor: colorPair[1]});\n\n  const gameDisplay = !isViewingSettings ? \"none\" : \"block\";\n  const cardStyle = window.innerWidth < 400 ? styles.cardMobile : styles.cardDesktop\n  const orClick = () => {\n    if (!isEricAndreModeActivated) {\n      onOr()\n    } else {\n      setShouldShowVideo(true)\n      setTimeout(() => {\n        setShouldShowVideo(false)\n        onOr()\n      }, 1500)\n    }\n  }\n  return (\n    <AnimatedCard\n      raised={true}\n      className={cardStyle}\n      style={{\n        display: gameDisplay,\n        opacity,\n        transform: transform.interpolate(t => `${t} rotateX(180deg)`)\n      }}\n    >\n      <CardHeader\n        title={<span style={{position: 'absolute', top: '18px', left: '16px'}}>Truthor</span>}\n        action={\n          <SettingsButton\n            isViewingSettings={false}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent className={styles.cardContent}>\n        {shouldShowVideo ? <EricAndre/> : <Typography variant=\"h4\">{question}</Typography>}\n      </CardContent>\n      <CardActions className={styles.cardActions}>\n        <Button\n          className={styles.truthButton}\n          onClick={onTruth}\n          variant=\"contained\"\n        >\n          <Typography variant=\"h6\">Truth</Typography>\n        </Button>\n        <Button className={styles.orButton} onClick={orClick} variant=\"contained\">\n          <Typography variant=\"h6\">Or</Typography>\n        </Button>\n      </CardActions>\n    </AnimatedCard>\n  );\n};\n\nexport default GameCard;\n","import React, { useState } from \"react\";\nimport {\n  useSpring,\n} from \"react-spring\";\nimport { iceBreaker, emotions, silly, bigPicture, storyTelling } from \"./decks\";\nimport \"./App.css\";\n\nimport SettingsCard from \"./SettingsCard\";\nimport GameCard from \"./GameCard\";\nimport Grid from '@material-ui/core/Grid';\n\nconst decks = {\n  'Ice Breakers': iceBreaker,\n  'Emotions': emotions,\n  'Silly': silly,\n  'Storytelling': storyTelling,\n  'Big Picture': bigPicture\n}\n\nconst deckNames = ['Ice Breakers', 'Big Picture', 'Emotions', 'Silly', 'Storytelling']\n\nconst colorPairs = [\n  ['#8360c3', '#2ebf91'],\n  ['#ffd452', '#544a7d'],\n  ['#403A3E', '#BE5869'],\n  ['#c2e59c', '#64b3f4'],\n  ['#fc00ff', '#00dbde'],\n  ['#304352', '#d7d2cc'],\n  ['#BA8B02', '#181818'],\n  ['#525252', '#3d72b4'],\n  ['#F1F2B5', '#135058'],\n  ['#7b4397', '#dc2430'],\n  ['#FEAC5E', '#C779D0'],\n  ['#360033', '#0b8793']\n]\nfunction shuffle(array) {\n  return array.sort(function(){ \n    return .5 - Math.random(); \n  });\n}\n\nconst shuffledColors = shuffle(colorPairs)\n\nconst Game = () => {\n  const [isEricAndreModeActivated, setIsEricAndreModeActivated] = useState(false)\n  const [colorIndex, setColorIndex] = useState(0)\n  const colorLength = shuffledColors.length\n  const [isViewingSettings, setIsViewingSettings] = useState(false);\n  const [isViewingIntroduction, setIsViewingIntroduction] = useState(true);\n  const [truthCount, setTruthCount] = useState(0);\n  const [orCount, setOrCount] = useState(0);\n  const [deckName, setDeckName] = useState(deckNames[0])\n  const toggleSettings = () => {\n    nextQuestion()\n    setIsViewingSettings(!isViewingSettings);\n  };\n  const { transform, opacity } = useSpring({\n    opacity: isViewingSettings ? 1 : 0,\n    transform: `perspective(600px) rotateX(${isViewingSettings ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 }\n  });\n\n  const [index, setIndex] = useState(0);\n  const [deck, setDeck] = useState(decks[deckName]);\n  const nextQuestion = () => {\n    const lastIndex = deck.length;\n    index >= lastIndex - 1 ? setIndex(0) : setIndex(index + 1);\n  };\n\n  const nextColor = () => {\n    colorIndex === colorLength - 1 ? setColorIndex(0) : setColorIndex(colorIndex + 1)\n  }\n\n  const onTruth = () => {\n    setTruthCount(truthCount + 1);\n    nextQuestion();\n    nextColor()\n  };\n\n  const onOr = () => {\n    setOrCount(orCount + 1);\n    nextQuestion();\n    nextColor()\n  };\n\n  const changeDeck = deckName => {\n    setDeckName(deckName)\n    setDeck(shuffle(decks[deckName]))\n  }\n\n\n  const colorPair = shuffledColors[colorIndex]\n  const background = `linear-gradient(135deg, ${colorPair[1]} 0%, ${colorPair[0]} 100%)`\n  const style = window.innerWidth < 400 ? {} : {background, height: '100%', width: '100%'}\n  return (\n    <Grid\n      style={style}\n      container\n      spacing={0}\n      align=\"center\"\n      justify=\"center\"\n      direction=\"column\"\n    >\n    <Grid item>\n      <GameCard\n        isEricAndreModeActivated={isEricAndreModeActivated}\n        colorPair={shuffledColors[colorIndex]}\n        isViewingSettings={isViewingSettings}\n        toggleSettings={toggleSettings}\n        question={deck[index]}\n        onTruth={onTruth}\n        onOr={onOr}\n        transform={transform}\n        opacity={opacity}\n      />\n    </Grid>\n    <Grid item>\n      <SettingsCard\n        isEricAndreModeActivated={isEricAndreModeActivated}\n        setIsEricAndreModeActivated={setIsEricAndreModeActivated}\n        isViewingIntroduction={isViewingIntroduction}\n        setIsViewingIntroduction={setIsViewingIntroduction}\n        changeDeck={changeDeck}\n        currentDeck={deckName}\n        deckNames={deckNames}\n        orCount={orCount}\n        truthCount={truthCount}\n        isViewingSettings={isViewingSettings}\n        toggleSettings={toggleSettings}\n        transform={transform}\n        opacity={opacity}\n      />\n    </Grid>\n    </Grid>\n  );\n};\nexport default Game;\n","\n\nexport const storyTelling = [\n  'While out for a walk, you meet an alien. What next?'\n]\n\nexport const bigPicture = [\n  'Is there an afterlife?',\n  'Can we trust artificial intelligence?',\n]\n\nexport const silly = [\n  'Who is more likely to join a cult?'\n]\n\nexport const emotions = [\n  'Even on a \"bad\" day, what gives you hope?'\n]\n\nexport const iceBreaker = [\n  'What would you do if you won the lottery?',\n]\n\nexport const testDeck = [\n  'beep',\n  'zoop'\n]\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport \"./App.css\";\n\nimport Game from \"./Game\";\n\nconst appTheme = createMuiTheme({\n  typography: {\n    fontFamily: \"DMMONOREG\"\n  }\n});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={appTheme}>\n        <CssBaseline />\n        <Game />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}