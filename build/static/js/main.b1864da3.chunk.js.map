{"version":3,"sources":["store.js","decks.js","SettingsButton.js","AnimatedCard.js","SettingsCard.js","GameCard.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","initialState","isShowingIntroduction","createStore","combineReducers","game","state","action","type","onTheRocks","settingsButtonStyle","makeStyles","icon","color","props","isViewingSettings","SettingsButton","toggleSettings","styles","IconButton","className","onClick","AnimatedCard","animated","Card","settingsCardStyle","card","isViewingIntroduction","background","position","height","width","willChange","topSpacing","marginTop","formControl","minWidth","beginButton","display","marginLeft","marginRight","SettingsBody","options","truthCount","orCount","CardHeader","title","CardContent","FormControl","InputLabel","Select","native","value","Typography","Link","href","IntroBody","setIsViewingIntroduction","window","innerWidth","style","Button","variant","connect","z","isisShowingIntroduction","decks","transform","opacity","console","log","settingsDisplay","key","body","interpolate","o","cardStyles","cardContent","overflowY","overflowX","truthButton","orButton","GameCard","question","onTruth","onOr","gameDisplay","t","CardActions","Game","useState","setIsViewingSettings","setTruthCount","setOrCount","useSpring","config","mass","tension","friction","index","setIndex","deck","lastIndex","length","nextQuestion","maxHeight","appTheme","createMuiTheme","typography","fontFamily","App","store","ThemeProvider","theme","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b1864da3.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport { combineReducers } from \"redux\";\n\nconst actionTypes = {\n    HIDE_INTRODUCTION: \"HIDE_INTRODUCTION\"\n}\n\nexport const hideIntroduction = () => ({\n    type: actionTypes.HIDE_INTRODUCTION,\n    payload: {}\n})\n\nconst initialState = {\n    isShowingIntroduction: true,\n}\nconst gameReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.HIDE_INTRODUCTION:\n            return {\n                ...state,\n                isShowingIntroduction: false\n            }\n        default:\n            return state\n    }\n}\nexport default createStore(combineReducers({game: gameReducer}))","export const onTheRocks = [\n  \"What are your vices? Have they gotten better or worse over time?\",\n  \"Do you think you are happier - or sadder - than the average person? Why?\",\n  \"What's a habit, compulsion, or relationship you wish you could quit?\",\n  \"Have you ever stolen anything? What, and why? Do you still have it?\",\n  \"Do your best (or wost) impersonation of me. I promise to clap appreciatively.\",\n  \"What's something you've done to try and be cool?\",\n  \"Describe the first time we met. What was your honest first impression of me?\",\n  \"What's the worst thing you've ever had to do at work or school? How'd you handle it?\",\n  \"If I didn't have my current job, what do you see me doing?\",\n  \"What's something I do that you hate?\",\n  \"Describe your first real kiss. Then describe your last kiss.\",\n  \"Describe your worst bathroom related disaster.\",\n  \"Have you ever been fired? If so, what for? If not, why not?\",\n  \"What's something you think people should appreciate more about you?\",\n  \"What movie title describes your last relationship?\",\n  \"What's something you miss about your last serious ex?\",\n];\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\n\nconst settingsButtonStyle = makeStyles({\n  icon: {\n    color: props => (props.isViewingSettings ? \"black\" : \"white\")\n  }\n});\n\nconst SettingsButton = ({ isViewingSettings, toggleSettings }) => {\n  const styles = settingsButtonStyle({ isViewingSettings });\n  return (\n    <IconButton className={styles.icon} onClick={toggleSettings}>\n      {!isViewingSettings ? <SettingsIcon /> : <KeyboardBackspaceIcon />}\n    </IconButton>\n  );\n};\n\nexport default SettingsButton;\n","import Card from \"@material-ui/core/Card\";\nimport { animated } from \"react-spring\";\n\nconst AnimatedCard = animated(Card);\n\nexport default AnimatedCard;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Link from \"@material-ui/core/Link\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { connect } from \"react-redux\";\n\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\n\nconst settingsCardStyle = makeStyles({\n  card: {\n    color: props => (props.isViewingIntroduction ? \"white\" : \"black\"),\n    background: props =>\n      props.isViewingIntroduction\n        ? \"linear-gradient(135deg, #CCABD8 0%, #E5C1CD 100%)\"\n        : \"white\",\n    position: \"absolute\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\"\n  },\n  topSpacing: {\n    marginTop: \"32px !important\"\n  },\n  formControl: {\n    minWidth: \"120px\"\n  },\n  beginButton: {\n    background: \"linear-gradient(135deg, #FE676E 0%, #FD8F52 100%)\",\n    color: \"white\",\n    display: \"flex\",\n    marginTop: \"18px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  }\n});\n\nconst SettingsBody = ({\n  styles,\n  options,\n  truthCount,\n  orCount,\n  toggleSettings\n}) => {\n  return (\n    <>\n      <CardHeader\n        title=\"Settings\"\n        action={\n          <SettingsButton\n            isViewingSettings={true}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent>\n        <FormControl className={styles.formControl}>\n          <InputLabel>Deck</InputLabel>\n          <Select native value=\"Just starting\">\n            {options}\n          </Select>\n        </FormControl>\n        <Typography className={styles.topSpacing}>\n          Y'all've selected Truth {truthCount} time{truthCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography>\n          Y'all've selected Or {orCount} time{orCount !== 1 ? \"s\" : \"\"}\n        </Typography>\n        <Typography className={styles.topSpacing}>\n          Suggest a question:{\" \"}\n          <Link href=\"mailto:truthorgame@gmail.com?subject=Question Suggestion&body=Hello -%0D%0A%0D%0AHere is my question suggestion: \">\n            {\" \"}\n            Email\n          </Link>\n        </Typography>\n      </CardContent>\n    </>\n  );\n};\n\nconst IntroBody = ({ styles, setIsViewingIntroduction, toggleSettings }) => {\n  return (\n    <>\n      <CardHeader title=\"Truthor\"></CardHeader>\n      <CardContent>\n        <Typography>\n          1. Each round, you'll be presented with a question.\n        </Typography>\n        <Typography>\n          2. As a group, decide on an action to perform to \"pass\" on answering\n          the question.\n        </Typography>\n        <Typography>\n          3. For each question, either answer it or perform the agreed upon\n          \"pass\" action - then press the corresponding button.{\" \"}\n        </Typography>\n        <Typography>\n          4. To view your game's selection stats, change the deck of cards, and\n          more - click the <SettingsIcon /> icon.\n        </Typography>\n        <Typography>5. Have fun!</Typography>\n        {window.innerWidth > 400 ? (\n          <Typography style={{ color: \"black\" }}>\n            6. Recommendation: this is best viewed on mobile.\n          </Typography>\n        ) : null}\n        <Button\n          onClick={() => {\n            setIsViewingIntroduction(false);\n            toggleSettings(false);\n          }}\n          className={styles.beginButton}\n          variant=\"contained\"\n        >\n          Shuffle & Begin\n        </Button>\n      </CardContent>\n    </>\n  );\n};\n\nconst SettingsCard = ({\n  isViewingIntroduction,\n  setIsViewingIntroduction,\n  decks,\n  orCount,\n  truthCount,\n  isViewingSettings,\n  toggleSettings,\n  transform,\n  opacity,\n  z\n}) => {\n  console.log(z)\n  const styles = settingsCardStyle({ isViewingIntroduction });\n  const settingsDisplay = !isViewingSettings ? \"block\" : \"none\";\n  const options = [\n    <option key={1} value=\"Just starting\">\n      Just starting\n    </option>,\n    <option key={2} value=\"Warming up\">\n      Warming up\n    </option>\n  ];\n  const body = isViewingIntroduction ? (\n    <IntroBody\n      styles={styles}\n      isViewingIntroduction={isViewingIntroduction}\n      setIsViewingIntroduction={setIsViewingIntroduction}\n      toggleSettings={toggleSettings}\n    />\n  ) : (\n    <SettingsBody\n      styles={styles}\n      options={options}\n      truthCount={truthCount}\n      orCount={orCount}\n      toggleSettings={toggleSettings}\n    />\n  );\n  return (\n    <AnimatedCard\n      height=\"100%\"\n      className={styles.card}\n      style={{\n        display: settingsDisplay,\n        opacity: opacity.interpolate(o => 1 - o),\n        transform\n      }}\n    >\n      {body}\n    </AnimatedCard>\n  );\n};\n\nconst mapStateToProps = state => ({\n  z: state.isisShowingIntroduction\n})\n\nexport default connect(mapStateToProps, null)(SettingsCard);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SettingsButton from \"./SettingsButton\";\nimport AnimatedCard from \"./AnimatedCard\";\n\nconst cardStyles = makeStyles({\n  card: {\n    position: \"absolute\",\n    background: \"linear-gradient(135deg, #f6d365 0%, #fda085 100%)\",\n    color: \"white\",\n    height: `100%`,\n    width: `100%`,\n    willChange: \" transform, opacity\"\n  },\n  cardContent: {\n    height: \"70%\",\n    overflowY: \"visible\",\n    overflowX: \"hidden\"\n  },\n  truthButton: {\n    background: \"linear-gradient(135deg, #f093fb 0%, #f5576c 100%)\",\n    color: \"white\"\n  },\n  orButton: {\n    background: \"linear-gradient(135deg, #5ee7df 0%, #b490ca 100%)\",\n    marginLeft: \"auto !important\",\n    color: \"white\"\n  }\n});\n\nconst GameCard = ({\n  isViewingSettings,\n  question,\n  onTruth,\n  onOr,\n  toggleSettings,\n  transform,\n  opacity\n}) => {\n  const styles = cardStyles();\n\n  const gameDisplay = !isViewingSettings ? \"none\" : \"block\";\n  return (\n    <AnimatedCard\n      height=\"100%\"\n      className={styles.card}\n      style={{\n        display: gameDisplay,\n        opacity,\n        transform: transform.interpolate(t => `${t} rotateX(180deg)`)\n      }}\n    >\n      <CardHeader\n        title=\"Truthor\"\n        action={\n          <SettingsButton\n            isViewingSettings={false}\n            toggleSettings={toggleSettings}\n          />\n        }\n      ></CardHeader>\n      <CardContent className={styles.cardContent}>\n        <Typography variant=\"h4\">{question}</Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          className={styles.truthButton}\n          onClick={onTruth}\n          variant=\"contained\"\n        >\n          <Typography variant=\"h6\">Truth</Typography>\n        </Button>\n        <Button className={styles.orButton} onClick={onOr} variant=\"contained\">\n          <Typography variant=\"h6\">Or</Typography>\n        </Button>\n      </CardActions>\n    </AnimatedCard>\n  );\n};\n\nexport default GameCard;\n","import React, { useState } from \"react\";\nimport {\n  useSpring,\n} from \"react-spring\";\nimport { onTheRocks } from \"./decks\";\nimport \"./App.css\";\n\nimport SettingsCard from \"./SettingsCard\";\nimport GameCard from \"./GameCard\";\n\nconst Game = () => {\n  const decks = {\n    onTheRocks\n  };\n  const [isViewingSettings, setIsViewingSettings] = useState(false);\n  const [isViewingIntroduction, setIsViewingIntroduction] = useState(true);\n  const [truthCount, setTruthCount] = useState(0);\n  const [orCount, setOrCount] = useState(0);\n  const toggleSettings = () => {\n    setIsViewingSettings(!isViewingSettings);\n  };\n  const { transform, opacity } = useSpring({\n    opacity: isViewingSettings ? 1 : 0,\n    transform: `perspective(600px) rotateX(${isViewingSettings ? 180 : 0}deg)`,\n    config: { mass: 5, tension: 500, friction: 80 }\n  });\n\n  const [index, setIndex] = useState(0);\n  const [deck, setDeck] = useState(onTheRocks);\n  const lastIndex = deck.length;\n  const nextQuestion = () => {\n    index === lastIndex - 1 ? setIndex(0) : setIndex(index + 1);\n  };\n  const onTruth = () => {\n    setTruthCount(truthCount + 1);\n    nextQuestion();\n  };\n  const onOr = () => {\n    setOrCount(orCount + 1);\n    nextQuestion();\n  };\n  return (\n    <div style={{ maxHeight: \"400px\", height: \"200px\" }}>\n      <GameCard\n        isViewingSettings={isViewingSettings}\n        toggleSettings={toggleSettings}\n        question={deck[index]}\n        onTruth={onTruth}\n        onOr={onOr}\n        transform={transform}\n        opacity={opacity}\n      />\n      <SettingsCard\n        isViewingIntroduction={isViewingIntroduction}\n        setIsViewingIntroduction={setIsViewingIntroduction}\n        decks={decks}\n        orCount={orCount}\n        truthCount={truthCount}\n        isViewingSettings={isViewingSettings}\n        toggleSettings={toggleSettings}\n        transform={transform}\n        opacity={opacity}\n      />\n    </div>\n  );\n};\nexport default Game;\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport \"./App.css\";\n\nimport Game from \"./Game\";\n\nconst appTheme = createMuiTheme({\n  typography: {\n    fontFamily: \"DMMONOREG\"\n  }\n});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={appTheme}>\n        <CssBaseline />\n        <Game />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}